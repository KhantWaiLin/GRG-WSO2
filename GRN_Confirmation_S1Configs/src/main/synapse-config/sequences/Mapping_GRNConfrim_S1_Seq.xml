<?xml version="1.0" encoding="UTF-8"?>
<sequence name="Mapping_GRNConfrim_S1_Seq" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <property name="Name" scope="default" type="STRING" value="Confirm_Shipment_All_DO"/>
    <property expression="concat(get-property('uri.var.DMS_URL'),'/grn/list/',get-property('uri.var.TenantId'),'/',get-property('uri.var.UserId'),'/',get-property('uri.var.CurrentTimeStamp'),'/null/null/')" name="URL" scope="default" type="STRING"/>
    <property expression="fn:substring-after(get-property('MessageID'), 'urn:uuid:')" name="Message_ID" scope="default" type="STRING"/>
    <log level="custom">
        <property expression="get-property('Message_ID')" name="Message ID"/>
    </log>
    <property expression="get-property(&quot;SYSTEM_DATE&quot;, &quot;yyyy-MM-dd'T'HH:mm:ss&quot;)" name="currentDate" scope="default" type="STRING"/>
    <dbreport>
        <connection>
            <pool>
                <driver>com.microsoft.sqlserver.jdbc.SQLServerDriver</driver>
                <url>jdbc:sqlserver://localhost:1433;databaseName=wso2_dms_sap_store;encrypt=true;trustServerCertificate=true;</url>
                <user>sa</user>
                <password>B!m5upp0rt</password>
            </pool>
        </connection>
        <statement>
            <sql><![CDATA[INSERT INTO wso2_Scheduler_RunTime Values (?,?,?,?,?,?,?)]]></sql>
            <parameter expression="get-property('Message_ID')" type="VARCHAR"/>
            <parameter expression="get-property('currentDate')" type="VARCHAR"/>
            <parameter type="VARCHAR" value="DMS_SAP"/>
            <parameter expression="get-property('URL')" type="VARCHAR"/>
            <parameter type="VARCHAR" value="Confirm_Shipment_All_DO"/>
            <parameter expression="get-property('uri.var.TenantId')" type="VARCHAR"/>
            <parameter expression="get-property('next_run_time')" type="VARCHAR"/>
        </statement>
    </dbreport>
    <sequence key="DMS_CallGRNConfirmationList_Seq"/>
    <log level="custom">
        <property expression="get-property('URL')" name="URL_Route"/>
        <property expression="$ctx:DataRecords" name="GRN_Confirmation_List"/>
    </log>
    <switch source="get-property('Status')">
        <case regex="401">
            <log level="custom">
                <property name="switch Log" value="401 case"/>
            </log>
            <sequence key="DMS_Token_Generate_Seq_2"/>
            <sequence key="DMS_CallGRNConfirmationList_Seq"/>
        </case>
        <case regex="403">
            <log level="custom">
                <property name="switch Log" value="403 case"/>
            </log>
            <sequence key="DMS_Token_Generate_Seq_2"/>
            <sequence key="DMS_CallGRNConfirmationList_Seq"/>
        </case>
        <default>
            <log level="custom">
                <property name="switch Log" value="Not Expired case"/>
            </log>
        </default>
    </switch>
    <payloadFactory media-type="json">
        <format>
			$1
		</format>
        <args>
            <arg evaluator="xml" expression="$ctx:DataRecords"/>
        </args>
    </payloadFactory>
    <iterate expression="json-eval($.GRN)" id="jsonIterator">
        <target>
            <sequence>
                <propertyGroup>
                    <property expression="json-eval($.GRNNumber)" name="GRNNumber" scope="default" type="STRING"/>
                    <property expression="json-eval($.GRNAttribute1)" name="GRNAttribute1" scope="default" type="STRING"/>
                    <property expression="json-eval($.Status)" name="Status" scope="default" type="STRING"/>
                    <property expression="json-eval($.GRNTypeId)" name="GRNTypeId" scope="default" type="STRING"/>
                </propertyGroup>
                <log>
                    <property expression="json-eval($.GRNAttribute1)" name="GRNAttribute_log"/>
                </log>
                <filter regex="GRN_COMPLETE" source="get-property('Status')">
                    <then>
                        <filter regex="INCOMING_SHIPMENT" source="get-property('GRNTypeId')">
                            <then>
                                <script language="js"><![CDATA[payload = mc.getPayloadJSON();
                					var orderItems = payload.items.OrderItem;
               						var log = mc.getServiceLog();
               						 
                                    var order = new Object();
			                        order.routeName='Confirm_Shipment_All_DO';
	                                order.next_run_time= mc.getProperty('next_run_time');
	                                order.schedulerId = mc.getProperty('Message_ID');
                                    order.PODDate = extractDate(payload.UpdatedTimeStamp);
                                    order.PODTime = FormatTime(payload.UpdatedTimeStamp);
                                    order.DeliveryNumber = mc.getProperty('GRNNumber').toString().split("_")[0];
                                    order.SalesOrderNumber = mc.getProperty('GRNAttribute1').toString();
                                    order.DoItem = new Array;
                                    order.ReturnMessage = new Array();
                                    order.original_payload = new Object();
									order.original_payload = {GRN_Confirmation : payload};
	                                if(Array.isArray(orderItems)){
	                                 	for(j = 0; j < orderItems.length; j++){
		                                 	data_row=orderItems[j];
		                                 	orderItem = new Object();
								            orderItem.SalesOrderNumber = mc.getProperty('GRNAttribute1').toString();
								            orderItem.DeliveryNumber = mc.getProperty('GRNNumber').toString().split("_")[0];
		                              		orderItem.PODQuantity = data_row.BatchQtyReceived;
		                              		
		                              		productList = mc.getProperty('ProductList');
									        productList = JSON.parse(productList);
									        productList = productList.Product;
									        productId = data_row.productId;
									        MaterialNumber = "";
									        productList.forEach(function (value, index, array) {
												if(value.productId == productId){
												MaterialNumber = value.productCode;	
											  } 
											});
								                					
								            orderItem.MaterialNumber = MaterialNumber;
                                            orderItem.BatchNumber = data_row.BatchNumber;
								            order.DoItem[j] = orderItem;
		                              	}
	                                 }
	                                 else{
	                                 	data_row=orderItems;
	                                 	orderItem = new Object();
	                                 	orderItem.SalesOrderNumber = mc.getProperty('GRNAttribute1').toString();
								        orderItem.DeliveryNumber = mc.getProperty('GRNNumber').toString().split("_")[0];
		                              	orderItem.PODQuantity = data_row.BatchQtyReceived;
		                              	
		                              	productList = mc.getProperty('ProductList');
									    productList = JSON.parse(productList);
									    productList = productList.Product;
									    productId = data_row.productId;
									    MaterialNumber = "";
									    productList.forEach(function (value, index, array) {
										if(value.productId == productId){
											MaterialNumber = value.productCode;	
										   } 
										});
								                					
								       orderItem.MaterialNumber = MaterialNumber;
                                       orderItem.BatchNumber = data_row.BatchNumber;
								       order.DoItem[0] = orderItem;
	                                 }
							        mc.setPayloadJSON(order);
							        
							        function padZero(value, length) {
										value = value.toString();
										while (value.length < length) {
											value = "0" + value;
										}
										return value;
									    }

                                    function extractDate(data) {
                                            var date = new Date(Number(data));
											
											var year = date.getFullYear();
											var month = padZero(date.getMonth() + 1, 2);
											var day = padZero(date.getDate(), 2);
											var hours = padZero(date.getHours(), 2);
											var minutes = padZero(date.getMinutes(), 2);
											var seconds = padZero(date.getSeconds(), 2);
											
											return (
												year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds
											);
                                    }
                                    function FormatTime(data) {
											var date = new Date(Number(data));
											var hours = padZero(date.getHours(), 2);
											var minutes = padZero(date.getMinutes(), 2);
											var seconds = padZero(date.getSeconds(), 2);
											
											return (
												"PT" + hours + "H" + minutes + "M" + seconds + "S"
											);
										}]]></script>
                                <store description="JDBC message store" messageStore="GrnConfirmationMessageStore"/>
                                <log level="custom">
                                    <property expression="json-eval($)" name="Message to sotre"/>
                                </log>
                            </then>
                            <else/>
                        </filter>
                    </then>
                    <else/>
                </filter>
            </sequence>
        </target>
    </iterate>
</sequence>
